---
description: 
globs: 
alwaysApply: true
---
# Codebase Overview

This document provides an overview of the `@eropple/key-sealed-envelope` library, its architecture, and key components.

## What It Is

`@eropple/key-sealed-envelope` is a TypeScript library for secure message sealing with multiple recipients, using the Web Crypto API. The core concept is described in the [README.md](mdc:README.md).

The main goal is to encrypt a payload with a symmetric key (the Content Encryption Key, or CEK), which is then encrypted for a set of recipients using their public keys. The entire envelope is then signed by the sender.

## Core Concepts & Implementation

The implementation is split into two main parts: Sealing and Unsealing.

- **Sealing**: The sealing logic is located in the `src/sealer` directory. The main entry point for this is [`src/sealer/core.ts`](mdc:src/sealer/core.ts), which orchestrates the creation of a `KeySealedEnvelope`. It uses helpers for specific cryptographic operations. There are high-level classes like [`RSASealer`](mdc:src/sealer/rsa-sealer.ts) and [`ECSealer`](mdc:src/sealer/ec-sealer.ts) that provide a simpler interface.

- **Unsealing**: The unsealing logic mirrors the sealing logic and is found in the `src/unsealer` directory. The core logic is in [`src/unsealer/core.ts`](mdc:src/unsealer/core.ts). The corresponding `RSAUnsealer` and `ECUnsealer` classes are in [`src/unsealer/rsa-unsealer.ts`](mdc:src/unsealer/rsa-unsealer.ts) and [`src/unsealer/ec-unsealer.ts`](mdc:src/unsealer/ec-unsealer.ts).

- **Data Structures**: The primary data structure is the [`KeySealedEnvelope`](mdc:src/types/envelope.ts), defined in `src/types/envelope.ts`. It's a JSON object containing the encrypted payload, encrypted keys for each recipient, and a signature. Keys are expected in JWK/JWKS format, with types defined in [`src/types/jwks.ts`](mdc:src/types/jwks.ts).

- **Entry Point**: The main library entry point is [`src/index.ts`](mdc:src/index.ts), which exports the necessary modules.

## How to Use

The `examples` directory demonstrates how to use the library.

- For a basic RSA-based example, see [`examples/quickstart.ts`](mdc:examples/quickstart.ts).
- For a more complex example using EC keys and multiple recipients, see [`examples/multiple-recipients.ts`](mdc:examples/multiple-recipients.ts).

The general flow is:
1.  Create a `Sealer` instance (`RSASealer` or `ECSealer`) with the sender's private key and recipients' public keys (in a JWKS).
2.  Call the `.seal()` method to create an envelope.
3.  The recipient creates an `Unsealer` instance with their private key and the sender's public key.
4.  The recipient calls the `.unseal()` method with the envelope to get the original data.
